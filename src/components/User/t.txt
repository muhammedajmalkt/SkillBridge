<form>
                 <h1 className='font-semibold mt-6 text-gray-700 '>Skill Offered</h1>
                 
                    <input className='border border-gray-600  px-4 h-9 rounded-md'
                    type='text' placeholder='Title' />
                    <label className='text-xs mb-5'>Add a Title like, "Photoshop Skills For:Illustrator,After Effects, or Cinema 4D" or "Learn UI/UX Design."</label>
                 
                    <select className='border border-gray-600  px-4 h-9 mb-5 text-center rounded-md '>
                        <option value={""}>-----SELECT CATEGORY-----</option>
                        <option value={"art/creativity"}>ART/CREATIVITY</option>
                        <option value={"cooking"}>COOKING</option>
                        <option value={"computer/it"}>COMPUTER/IT</option>
                        <option value={"outdoor/sports"}>OUTDOOR/SPORTS</option>
                        <option value={"languages"}>LANGUAGES</option>
                        <option value={"consulting"}>CONSULTING</option>
                        <option value={"beauty/health"}>BEAUTY/HEALTH</option>
                        <option value={"care/sitting"}>CARE/SITTING</option>
                        <option value={"do it yourselfes"}>DO IT YOUSELFES</option>
                        <option value={"education"}>EDUCATION</option>
                        <option value={"music"}>MUSIC</option>
                        <option value={"others"}>OTHERS</option>
                    </select>
                    <div>
                        <label>Expirence : </label>
                        {["Beginner", "Intermediate", "Expert"].map((level)=>(
                            <>
                           <input
                           className='mb-6 text-center ml-2 mr-1'
                           type="radio"
                           name="skillLevel"
                           placeholder='hjghj'
                           value={level}/>

                           <label>{level}</label>
                           </>
                        ))}
                    </div>
                        
 
                     <textarea className='border border-gray-600  px-4 h-14 mb-5 pt-2 rounded-md'  placeholder='Detaile information' />

                      <input className='  '
                      type='file' placeholder='Image '/>
                      <label className='text-xs mb-3'>Choose an image for  your skill  </label>
                      

                {/* {wanted/////////////////} */}
                <hr/>
                 <h1 className='font-semibold mt-6 text-gray-700 '>Skill Needed</h1>
                 
                 <input className='border border-gray-600  px-4 h-9 rounded-md '
                 type='text' placeholder='Title' />
                 <label className='text-xs mb-5'>Add a Title like, "Photoshop Skills For:Illustrator,After Effects, or Cinema 4D" or "Learn UI/UX Design."</label>
              
                 <select className='border border-gray-600  px-4 h-9 mb-5 text-center rounded-md '>
                     <option value={""}>-----SELECT CATEGORY-----</option>
                     <option value={"art/creativity"}>ART/CREATIVITY</option>
                     <option value={"cooking"}>COOKING</option>
                     <option value={"computer/it"}>COMPUTER/IT</option>
                     <option value={"outdoor/sports"}>OUTDOOR/SPORTS</option>
                     <option value={"languages"}>LANGUAGES</option>
                     <option value={"consulting"}>CONSULTING</option>
                     <option value={"beauty/health"}>BEAUTY/HEALTH</option>
                     <option value={"care/sitting"}>CARE/SITTING</option>
                     <option value={"do it yourselfes"}>DO IT YOUSELFES</option>
                     <option value={"education"}>EDUCATION</option>
                     <option value={"music"}>MUSIC</option>
                     <option value={"others"}>OTHERS</option>
                 </select>

                  <div>
                      <lable>Priority : </lable>
                        {["Low", "Medium", "High"].map((level)=>(
                            <>
                           <input
                           className='mb-6 text-center ml-2 mr-1'
                           type="radio"
                           name="skillLevel"
                           placeholder='hjghj'
                           value={level}/>
                           <label>{level}</label>
                           </>
                        ))}
                    </div>

                     <textarea className='border border-gray-600  px-4 h-14 mb-5 pt-2 rounded-md'  placeholder='Detaile information' />

                 {/* {wanted///////////////} */}
                   <button className=' bg-[#6d28d2]  text-white font-md px-5 py-1 text-lg w-fit ml-[500px] rounded-md'>Nextâ†’</button>
                 
            </div>
             </form>








             import React, { useState } from 'react';
import Nav from '../Navbar/Nav';

const Profile = () => {
  const [addSwap, setAddSwap] = useState(false);

  const handleAddSwap = () => {
    setAddSwap(true);
  };

  return (
    <div>
      <Nav />
      <div className='mt-[72px] flex flex-row justify-center max-w-[1862px] min-h-screen p-6'>
        {/* Left Sidebar */}
        <div className='flex flex-col border-l border-y border-gray-600 w-[215px] items-center text-center'>
          <img className='w-[120px] h-[120px] mt-8 rounded-full border-2 border-[#6d28d2]' src="dp.png" alt="Profile" />
          <h3 className='font-medium pt-2'>Ablaaaash</h3>
          <h6 className='text-xs'>Web Developer | Designer</h6>
          <h6 className='text-xs'>www//local github///</h6>
          <button className='text-xs border bg-[#6d28d2] text-white px-2 py-[2px] mt-4 rounded-3xl'>Edit Profile</button>

          <div className='mt-10 text-sm'>
            <h6 className='mb-2 cursor-pointer' onClick={handleAddSwap}>Add a Swap</h6>
            <h6 className='cursor-pointer'>Edit Swap</h6>
          </div>
        </div>

        {/* Profile Form Section */}
        <div className='border border-gray-600 flex-grow p-10'>
          <div className='border-b border-gray-600 h-[92px] py-4 text-center'>
            <h1 className='text-xl font-semibold'>Public Profile</h1>
            <h3 className='text-sm'>Add information about yourself</h3>
          </div>

          {/* Profile Form */}
          <form className='flex flex-col justify-center mx-32 gap-3 text-sm text-gray-600'>
            <h1 className='font-semibold text-gray-700'>Basics</h1>

            {/* Name Input (Disabled) */}
            <input 
              className='border border-gray-600 px-4 h-9 rounded-md bg-gray-100' 
              type='text' 
              value="Ablaaash" 
              disabled 
            />

            {/* Headline Input */}
            <input className='border border-gray-600 px-4 h-9 rounded-md' type='text' placeholder='Headline' />
            <label className='text-xs'>Add a professional headline like, "Instructor at ABC" or "Web Developer."</label>

            {/* Social Link Input */}
            <input className='border border-gray-600 px-4 h-9 rounded-md' type='url' placeholder='GitHub / LinkedIn URL' />
            <label className='text-xs'>Add Your Social Links like GitHub, LinkedIn.</label>

            {/* Image Upload */}
            <input className='border border-gray-600 px-4 py-2 rounded-md' type='file' />
            <label className='text-xs mb-3'>Choose an image for your profile.</label>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Profile;



swp////////////
 <>
    {skills?.data?.length > 0 ? (
    <div className='mt-[72px] text-center pt-10 '>
        <form  className='h-8'>
        <input type='text' placeholder='Search'
        className='border border-[#6d28d2] h-8 px-4 w-[600px] rounded-md focus:outline-none focus:ring-1 focus:ring-[#6d28d2] bg-slate-50'
        />
        <button  type='submit' className='bg-[#6d28d2] text-white border border-[#6d28d2] text-md h-8  px-3 hover:bg-[#892de1] rounded-md ml-1'>Search Skill</button>
        </form>
    </div>

       {/* Card Section */}
        <div className="flex justify-center mt-20 mb-28">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
                
                {/* Card  */}
                {/* {Array(12).fill("").map((_, index) => ( */}
                    {skills?.data.map((item,index)=>( 
                    <div
                        onClick={()=>productClick(item._id)}
                        key={index}
                        className="group flex flex-col h-[380px] w-[280px] shadow-xl rounded-md overflow-hidden bg-white transition-transform duration-300 hover:scale-105 "
                      >
                        <img
                            className="h-[160px] object-cover w-full transition-transform duration-300 ease-in-out group-hover:scale-110"
                            src={item.offeredImage}
                            alt="Skill Image"
                        />
                        <div className="p-4">
                            <h1 className="text-md hover:text-[#6d28d2]">{item.offeredTitle}</h1>
                            <h1 className="bg-[#F8F8F9] text-sm text-gray-500 mt-4 py-1 text-center">{item.offeredCategory?.toUpperCase()}</h1>
                            <button className="border border-[#6d28d2] w-full text-[#6d28d2] hover:text-white hover:bg-[#6d28d2] mt-8 text-xs px-10 py-2 rounded-3xl">
                                REQUEST A SWAP
                            </button>
                        </div>
                    </div>
                ))}
            </div>
        </div>):(
                    <p className="text-center w-full">No item found!</p>

        )}

    </>   



    ///////Search
    {/* <div className="mt-[72px] text-center pt-10 flex justify-center relative -z-10">
    <span className='mr-4  text-[#6d28d2] text- cursor-pointer flex items-center gap-2 bg-[#6c28d221] px-2  rounded-2xl transition duration-300" ' onClick={()=>setCategoryDrp(!categoryDrp)}><IoFilterSharp/>Filter</span>
          
           {categoryDrp && 
           <div className='absolute top-[40px] left-[365px] -translate-x-1/2 bg-white shadow-lg 
                     rounded-lg p-3 w-60 border  z-50 transition-all
                     animate-fadeIn flex flex-col  cursor-pointer ' >
           
                      {[  "art/creativity",
                          "cooking",
                          "computer/it",
                          "outdoor/sports",
                          "languages",
                          "consulting",
                          "beauty/health",
                          "care/sitting",
                          "do it yourselfes",
                          "education",
                          "music",
                          "others",
                      ].map((item)=>(
                          <h4 className='border-b text-sm hover:bg-slate-100  '>{item.toUpperCase() }</h4>
                          
                        ))}
                            </div>}
        <form >
        <input type='text' placeholder='Search'
        className='border border-[#6d28d2] h-8 px-4 w-[600px]   rounded-tl-2xl rounded-bl-2xl focus:outline-none focus:ring-1 focus:ring-[#6d28d2] bg-slate-50'
        />
            <button  type='submit' className='bg-[#6d28d2] text-white border-2 border-[#6d28d2] text-md py-[6px]  rounded-tr-2xl rounded-br-2xl px-3 hover:bg-[#892de1]  absolute r-0'><IoSearchOutline/> </button>    
        </form>
      </div> */}

      ////////////////Questions
      /////////////////////////////


      import { useState } from "react";
import { useCreateQst } from "../../../hooks/useSwap";
import { useFormik } from "formik";

const QuestionCollector = ({formik}) => {
  const [questions, setQuestions] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState("");
  const [answers, setAnswers] = useState(["", "", ""]);
  const [correctAnswer, setCorrectAnswer] = useState("");
  const [difficulty, setDifficulty] = useState("Easy");
  const [showResults, setShowResults] = useState(false);
  const [err,setErr] = useState(false)

  //  difficulty levels and their required count
  const difficultyLevels = {
    Expert: { points: 3, required: 3 },
    Inter: { points: 2, required: 4 },
    Easy: { points: 1, required: 3 }
  };

  // Count questions by difficulty level
  const countQuestionsByLevel = (level) =>
    questions.filter(q => q.difficulty === level).length;

  // Add a new question to the list
  const handleAddQuestion = () => {
    if (
      currentQuestion.trim() &&
      answers.every(ans => ans.trim()) &&
      answers.includes(correctAnswer)
    ) {
      // Ensure each difficulty level has the required number of questions
      if (countQuestionsByLevel(difficulty) < difficultyLevels[difficulty].required) {
        setQuestions([
          ...questions,
          { 
            question: currentQuestion, 
            answers, 
            correct_answer: correctAnswer, 
            difficulty,
            points: difficultyLevels[difficulty].points
          }
        ]);
        // setCurrentQuestion("");
        // setAnswers(["", "", ""]);
        // setCorrectAnswer("");
      } else {
        setErr(true)
        // alert(`You already have ${difficultyLevels[difficulty].required} ${difficulty} questions.`);
      }
    } else {
      alert("Ensure all fields are filled and the correct answer is in the options.");
    }
  };
  // const {mutate:createQst} =useCreateQst()
  // const handleSave = () =>{
  //   console.log(questions);
  //   createQst(questions,{
      
  //    onSuccess:(data)=>{
  //     console.log(data,"suceess");
      
  //    },
  //    onError:(err)=>{
  //     console.log(err);
      
  //    }
  //   })
    
  // }
  
  console.log(formik);
  
  onsubmit :(values) =>{

  }

  return (
    <div className="flex flex-col items-center justify-center h-screen bg-gray-100 p-4">
      <div className="w-full max-w-md bg-white p-6 rounded-lg shadow-md">
        <form 
        onSubmit={formik.handleSubmit}
        >
          <h2 className="text-lg font-semibold mb-4">Enter a Question</h2>
          <input
            type="text"
            name="currentQuestion"
            placeholder="Type your question here"
            value={formik.values.currentQuestion}
            onChange={formik.handleChange}
            className="w-full p-2 border rounded mb-4"
          />
          {formik.touched.currentQuestion && formik.errors.currentQuestion && (
            <small className="text-red-600">{formik.errors.currentQuestion}</small>
          )}

          <h3 className="text-sm font-semibold mb-2">Enter 3 Answers</h3>
          {formik.values.answers.map((answer, index) => (
            <input
              key={index}
              type="text"
              name={`answers[${index}]`}
              placeholder={`Answer ${index + 1}`}
              value={answer}
              onChange={formik.handleChange}
              className="w-full p-2 border rounded mb-2"
            />
          ))}
          {formik.touched.answers && formik.errors.answers && (
            <small className="text-red-600">{formik.errors.answers}</small>
          )}

          <h3 className="text-sm font-semibold mb-2">Correct Answer</h3>
          <select
            name="correctAnswer"
            value={formik.values.correctAnswer}
            onChange={formik.handleChange}
            className="w-full p-2 border rounded mb-4"
          >
            <option value="">Select correct answer</option>
            {formik.values.answers.map((ans, index) => (
              <option key={index} value={ans}>
                {ans}
              </option>
            ))}
          </select>
          {formik.touched.correctAnswer && formik.errors.correctAnswer && (
            <small className="text-red-600">{formik.errors.correctAnswer}</small>
          )}

          <h3 className="text-sm font-semibold mb-2">Difficulty Level</h3>
          <select
            name="difficulty"
            value={formik.values.difficulty}
            onChange={formik.handleChange}
            className="w-full p-2 border rounded mb-4"
          >
            <option value="Easy">Easy (1 Point)</option>
            <option value="Inter">Inter (2 Points)</option>
            <option value="Expert">Expert (3 Points)</option>
          </select>

          <button type="submit" className="w-full p-2 bg-blue-500 text-white rounded mt-4 hover:bg-blue-600">
            Add Question
          </button>

          {formik.values.questions.length > 0 && (
            <button type="button" onClick={handleSave} className="w-full p-2 bg-green-500 text-white rounded mt-4 hover:bg-green-600">
              Finish & Save Questions
            </button>
          )}
        </form>

        {formik.values.questions.length > 0 && (
          <div className="mt-6">
            <h2 className="text-xl font-semibold mb-4">Collected Questions</h2>
            <ul className="list-disc pl-5">
              {formik.values.questions.map((q, index) => (
                <li key={index} className="mb-2">
                  <strong>Q{index + 1} ({q.difficulty.toUpperCase()} - {q.points} pts):</strong> {q.question}
                  <ul className="list-disc pl-5">
                    {q.answers.map((ans, i) => (
                      <li key={i} className={ans === q.correct_answer ? "font-bold text-green-600" : ""}>
                        {ans}
                      </li>
                    ))}
                  </ul>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
}
export default QuestionCollector


//////
// import { ErrorMessage, Field, Form, Formik } from 'formik'
// import React, { useState } from 'react'
// import { swapValidation } from './SwapValidation'
// import { useMutation } from '@tanstack/react-query'
// import { useCreateSwap } from '../../../hooks/useSwap'
// import { useSelector } from 'react-redux'
// import toast  from 'react-hot-toast'
// import { FaSpinner } from 'react-icons/fa'
// import QuestionCollector from '../Favour/Favorite'



// const initialValue ={
//     offeredTitle:"",
//     offeredCategory:"",
//     offeredExpireince:"",
//     offeredDetails:"",
//     offeredImage:"",
//     neededTitle:"",
//     neededCategory:"",
//     neededPriority:"",
//     neededDetails:"",
//      neededImage:"",
//      hours:"1"
//     }


// const AddSwap = () => {
//     const [next,setNext]=useState("offered")
//     const [store,setStore] =useState(null)
//     const { mutate:createSwap ,isPending} = useCreateSwap()

    
//     const handleSubmit = (values,{resetForm}) => {
//         console.log(values);
//         const formData = new FormData()
//          formData.append("offeredTitle",values.offeredTitle)
//          formData.append("offeredCategory",values.offeredCategory)
//          formData.append("offeredExpireince",values.offeredExpireince)
//          formData.append("offeredDetails",values.offeredDetails)
//          formData.append("offeredImage",values.offeredImage)
//          formData.append("neededTitle",values.neededTitle)
//          formData.append("neededCategory",values.neededCategory)
//          formData.append("neededPriority",values.neededPriority)
//          formData.append("neededDetails",values.neededDetails)
//          formData.append("neededImage",values.neededImage)
//          formData.append("hours",values.hours)
    
//        createSwap(formData, {
//           onSuccess: (data) => {  
//             console.log(data);
//                toast.success(data?.message, {
//                     position: "top-right",
//                     autoClose: 3000,
//                     hideProgressBar: false,
//                     closeOnClick: true,
//                     pauseOnHover: false,
//                     draggable: true,
//                   });          
//             resetForm(); 
//         },
//           onError: (err) => {
//             console.log("API Error:", err);
//               toast.error(err.response?.data?.message || "An error occurred", {
//                 position: "top-right",
//                 autoClose: 3000,
//                 hideProgressBar: false,
//                 closeOnClick: true,
//                 pauseOnHover: false,
//                 draggable: true,
//               });
            
//           },
//         });
      
//     };
//  return(
//   <div className="border border-gray-600">
//   <div className="border-b border-gray-600 h-[92px] py-4 text-center">
//     <h1 className="text-20px font-semibold">Exchange skills with others</h1>
//     <h3 className="text-sm">Add information about your Skill</h3>
//   </div>
//   <Formik initialValues={initialValue} validationSchema={swapValidation} onSubmit={handleSubmit}>
//     {({ setFieldValue, isValid ,validateForm}) => (
//       <Form className="p-10 mx-32 text-sm text-gray-600">
//         {next === "offered" && 
//           <div className='flex flex-col'>
//             <h1 className="font-semibold mt-6 text-gray-700">Skill Offered</h1>
//             <Field className="border border-gray-600 px-4 h-9 rounded-md" type="text" name="offeredTitle" placeholder="Title" />
//             <ErrorMessage name="offeredTitle" component="small" className="text-red-600 text-xs block" />
//             <Field as="select" className="border border-gray-600 px-4 h-9 text-center rounded-md" name="offeredCategory">
//               <option value="">SELECT CATEGORY</option>
//               {["art/creativity", "cooking", "computer/it", "outdoor/sports", "languages", "consulting", "beauty/health", "education", "music", "others"].map((category) => (
//                 <option key={category} value={category}>
//                   {category.toUpperCase()}
//                 </option>
//               ))}
//             </Field>
//             <ErrorMessage name="offeredCategory" component="small" className="text-red-600 text-xs block" />
//             <label className="text-xs">Choose your experience level:</label>
//             {["Beginner", "Intermediate", "Expert"].map((level, index) => (
//               <label key={index} className="ml-2">
//                 <Field className="mr-1" type="radio" name="offeredExpireince" value={level} /> {level}
//               </label>
//             ))}
//             <ErrorMessage name="offeredExpireince" component="small" className="text-red-600 text-xs block" />
//             <Field as="textarea" name="offeredDetails" className="border border-gray-600 px-4 h-14 pt-2 rounded-md" placeholder="Detailed information" />
//             <ErrorMessage name="offeredDetails" component="small" className="text-red-600 text-xs block" />
//             <input type="file" onChange={(e) => setFieldValue("offeredImage", e.target.files[0])} className="border border-gray-600 px-4 py-2 rounded-md" />
//             <ErrorMessage name="offeredImage" component="small" className="text-red-600 text-xs block" />
//             <div className="flex justify-end">
//             <button 
//   type="button" 
//   onClick={async () => {
//     const errors = await validateForm(); // Run Formik validation manually
//     if (Object.keys(errors).length > 0) {
//       toast.error("Please fill in all required fields before proceeding!", {
//         position: "top-right",
//         autoClose: 3000,
//         hideProgressBar: false,
//         closeOnClick: true,
//         pauseOnHover: false,
//         draggable: true,
//       });
//       return;
//     }
//     setNext("needed"); // Move forward if no errors
//   }}  
//   className="bg-[#6d28d2] text-white px-5 py-1 text-lg rounded-md mt-4"
// >
//   Next1
// </button>

//             </div>
//           </div>
//         }
//         {next === "needed" && (
//           <div className='flex flex-col'>
//             <h1 className="font-semibold mt-6 text-gray-700">Skill Needed</h1>
//             <Field className="border border-gray-600 px-4 h-9 rounded-md" type="text" name="neededTitle" placeholder="Title" />
//             <ErrorMessage name="neededTitle" component="small" className="text-red-600 text-xs block" />
//             <Field as="select" className="border border-gray-600 px-4 h-9 text-center rounded-md" name="neededCategory">
//               <option value="">SELECT CATEGORY</option>
//               {["art/creativity", "cooking", "computer/it", "outdoor/sports", "languages", "consulting", "beauty/health", "education", "music", "others"].map((category) => (
//                 <option key={category} value={category}>
//                   {category.toUpperCase()}
//                 </option>
//               ))}
//             </Field>
//             <ErrorMessage name="neededCategory" component="small" className="text-red-600 text-xs block" />
//             <Field as="textarea" name="neededDetails" className="border border-gray-600 px-4 h-14 pt-2 rounded-md" placeholder="Detailed information" />
//             <ErrorMessage name="neededDetails" component="small" className="text-red-600 text-xs block" />
//             <Field className="border border-gray-600 px-4 py-2 rounded-md" type="number" name="hours" placeholder="Hours" />
//             <ErrorMessage name="hours" component="small" className="text-red-600 text-xs block" />
//             <div className="flex  justify-between">
//             <button type="button" onClick={() => setNext("offered")} className="bg-[#6d28d2] text-white px-5 py-1 text-lg rounded-md mt-4">
//               Back
//             </button>
//             <button type="submit" className="bg-[#6d28d2] text-white px-5 py-1 text-lg rounded-md mt-4">
//               {isPending ? <span className='flex items-center'> Loading <FaSpinner className="animate-spin ml-2" /></span> : "Submit"}
//             </button>
//             </div>
           
//           </div>
//         )}
//       </Form>
//     )}
//   </Formik>
//   {/* {next === "qstn" && <QuestionCollector />} */}
// </div>

//  )
// }

// export default AddSwap
    {/* <button
                    type="button"className={`px-5 py-1 text-lg rounded-md ${isValid ? "bg-[#6d28d2] text-white"
                        : "bg-gray-400 text-gray-200 cursor-not-allowed"
                    }`}
                    onClick={() => isValid  && setQuestion(true)}
                    disabled={!isValid}
                  >
                    Next
                  </button> */}

                    {/* {question} */}
                  {/* // <div className='border border-gray-600 h-screen  '>
                  //     <div className='border-b  border-gray-600  h-[92px] py-4 text-center'>
                  //         <h1 className='text-20px font-semibold' > Create Questions & Answers for Your Offered Skill</h1>
                  //         <h3 className='text-sm'>Customize  Skill Assessment</h3>
                  //     </div>
                
                  //       <div className='flex flex-col justify-center p-10 mx-32 gap-1 text-sm text-gray-600 '>
                  //       <ul className='text-xs text-gray-500 list-disc'>
                  //           <h6 className='font-semibold text-md mb-4'>Instructions for Creating Questions & Answers:</h6>
                  //           <li>Ensure that the quiz contains exactly 10 questions.</li>
                  //           <li>Each question must have three answer options, with one marked as the correct answer.</li>
                  //           <li>Ensure a mix of difficulty levels, from easy to expert, to challenge learners progressively</li>
                  //           <li>Assign points to each question based on difficulty ( eg:  Easy: 1 point,Inter: 2 points ,Expert: 3 points)</li>
                  //       </ul>
                  //     </div>
                  // </div>
                  {next === "qstn" && <QuestionCollector/>} */}




                  import React from 'react';
                  import { useFormik } from 'formik';
                  import { useMutation } from '@tanstack/react-query';
                  import { useCreateSwap } from '../../../hooks/useSwap';
                  import toast from 'react-hot-toast';
                  import { FaSpinner } from 'react-icons/fa';
                  import { swapValidation } from './SwapValidation'
                  import QuestionCollector from '../Favour/Favorite';

                  
                  const AddSwap = () => {
                    const { mutate: createSwap, isPending } = useCreateSwap()
                  
                    const formik = useFormik({
                      initialValues: {
                        offeredTitle: '',
                        offeredCategory: '',
                        offeredExpireince: '',
                        offeredDetails: '',
                        offeredImage: '',
                        neededTitle: '',
                        neededCategory: '',
                        neededPriority: '',
                        neededDetails: '',
                        neededImage: '',
                        hours: '1',

                        currentQuestion: "",
                        answers: ["", "", ""],
                        correctAnswer: "",
                        difficulty: "Easy",
                        points:null,
                        questions: [],
                  
                      },validationSchema:swapValidation,
                    
                      onSubmit: (values) => {
                        const submissionData = new FormData();
                        Object.keys(values).forEach((key) => {
                          submissionData.append(key, values[key]);
                        });
                  
                        createSwap(submissionData, {
                          onSuccess: (data) => {
                            toast.success(data?.message, {
                              position: 'top-right',
                              autoClose: 3000,
                              hideProgressBar: false,
                              closeOnClick: true,
                              pauseOnHover: false,
                              draggable: true,
                            });
                            formik.resetForm();
                          },
                          onError: (err) => {
                            toast.error(err.response?.data?.message || 'An error occurred', {
                              position: 'top-right',
                              autoClose: 3000,
                              hideProgressBar: false,
                              closeOnClick: true,
                              pauseOnHover: false,
                              draggable: true,
                            });
                          },
                        });
                      },
                    });
                  
                    const [next, setNext] = React.useState('offered');
                  
                    const isOfferedValid = () => {
                      return (
                        formik.values.offeredTitle &&
                        formik.values.offeredCategory &&
                        formik.values.offeredExpireince &&
                        formik.values.offeredDetails.length >= 20
                      );
                    };
                  
                    const isNeededValid = () => {
                      return (
                        formik.values.neededTitle &&
                        formik.values.neededCategory &&
                        formik.values.neededDetails.length >= 20 &&
                        formik.values.hours
                      );
                    };
                  
                    return (
                      <div className="border border-gray-600">
                        <div className="border-b border-gray-600 h-[92px] py-4 text-center">
                          <h1 className="text-20px font-semibold"> Exchange skills with others </h1>
                          <h3 className="text-sm"> Add information about your Skill</h3>
                        </div>
                        <form
                          onSubmit={formik.handleSubmit}
                          className="p-10 mx-32 text-sm text-gray-600"
                        >
                          {next === "offered" && (
                            <div className="flex flex-col">
                              <h1 className="font-semibold mt-6 text-gray-700">Skill Offered</h1>
                              <input
                                className="border border-gray-600 px-4 h-9 rounded-md"
                                type="text"
                                name="offeredTitle"
                                placeholder="Title"
                                value={formik.values.offeredTitle}
                                onChange={formik.handleChange}
                                onBlur={formik.handleBlur}
                              />
                              {formik.touched.offeredTitle &&formik.errors.offeredTitle &&
                                <div className="text-red-500 text-xs"> {formik.errors.offeredTitle}</div>}
                              
                              <select
                                className="border border-gray-600 px-4 h-9 text-center rounded-md"
                                name="offeredCategory"
                                value={formik.values.offeredCategory}
                                onChange={formik.handleChange}
                                onBlur={formik.handleBlur}
                              >
                                <option value="">SELECT CATEGORY</option>
                                {[
                                  "art/creativity",
                                  "cooking",
                                  "computer/it",
                                  "outdoor/sports",
                                  "languages",
                                  "consulting",
                                  "beauty/health",
                                  "education",
                                  "music",
                                  "others",
                                ].map((category) => (
                                  <option key={category} value={category}>
                                    {category.toUpperCase()}
                                  </option>
                                ))}
                              </select>
                              {formik.touched.offeredCategory && formik.errors.offeredCategory &&
                                <div className="text-red-500 text-xs">{formik.errors.offeredCategory}</div>}
                              <label className="text-xs">
                                Choose your experience level:
                              </label>
                              {["Beginner", "Intermediate", "Expert"].map(
                                (level, index) => (
                                  <label key={index} className="ml-2">
                                    <input
                                      className="mr-1"
                                      type="radio"
                                      name="offeredExpireince"
                                      value={level}
                                      onChange={formik.handleChange}
                                      onBlur={formik.handleBlur}
                                    />{" "}
                                    {level}
                                  </label>
                                )
                              )}
                              {formik.touched.offeredExpireince &&  formik.errors.offeredExpireince &&
                                <div className="text-red-500 text-xs">  {formik.errors.offeredExpireince} </div>}
                              <textarea
                                name="offeredDetails"
                                className="border border-gray-600 px-4 h-14 pt-2 rounded-md"
                                placeholder="Detailed information"
                                value={formik.values.offeredDetails}
                                onChange={formik.handleChange}
                                onBlur={formik.handleBlur}
                              />
                              {formik.touched.offeredDetails && formik.errors.offeredDetails && 
                               <div className="text-red-500 text-xs">  {formik.errors.offeredDetails} </div>}
                                                                  
                              <input
                                type="file"
                                name="offeredImage"
                                onChange={(event) => { formik.setFieldValue("offeredImage", event.currentTarget.files[0])}}
                                onBlur={formik.handleBlur}
                                className="border border-gray-600 px-4 py-2 rounded-md"
                              />
                              {formik.touched.offeredImage && formik.errors.offeredImage &&
                                <div className="text-red-500 text-xs">{formik.errors.offeredImage} </div>}
                              
                              <div className="flex justify-end">
                                <button
                                  type="button"
                                  disabled={!isOfferedValid()}
                                  onClick={() => setNext("needed")}
                                  className={` text-white px-5 py-1 text-lg rounded-md mt-4   ${isOfferedValid()? "bg-[#6d28d2] cursor-pointer" : "bg-gray-400"}`}
                                >
                                  Next
                                </button>
                              </div>
                            </div>
                          )}

                          {/* {needed} */}
                          {next === "needed" && (
                            <div className="flex flex-col">
                              <h1 className="font-semibold mt-6 text-gray-700">
                                Skill Needed
                              </h1>
                              <input
                                className="border border-gray-600 px-4 h-9 rounded-md"
                                type="text"
                                name="neededTitle"
                                placeholder="Title"
                                value={formik.values.neededTitle}
                                onChange={formik.handleChange}
                                onBlur={formik.handleBlur}
                              />
                              {formik.touched.neededTitle && formik.errors.neededTitle &&
                                <div className="text-red-500 text-xs"> {formik.errors.neededTitle}</div>}
                              <select
                                className="border border-gray-600 px-4 h-9 text-center rounded-md"
                                name="neededCategory"
                                value={formik.values.neededCategory}
                                onChange={formik.handleChange}
                                onBlur={formik.handleBlur}
                              >
                                <option value="">SELECT CATEGORY</option>
                                {[
                                  "art/creativity",
                                  "cooking",
                                  "computer/it",
                                  "outdoor/sports",
                                  "languages",
                                  "consulting",
                                  "beauty/health",
                                  "education",
                                  "music",
                                  "others",
                                ].map((category) => (
                                  <option key={category} value={category}>
                                    {category.toUpperCase()}
                                  </option>
                                ))}
                              </select>
                              {formik.touched.neededCategory &&formik.errors.neededCategory && 
                                <div className="text-red-500 text-xs">{formik.errors.neededCategory}</div> }
                              <textarea
                                name="neededDetails"
                                className="border border-gray-600 px-4 h-14 pt-2 rounded-md"
                                placeholder="Detailed information"
                                value={formik.values.neededDetails}
                                onChange={formik.handleChange}
                                onBlur={formik.handleBlur}
                              />
                              <div>
                              {formik.touched.neededDetails && formik.errors.neededDetails && 
                           <div className="text-red-500 text-xs"> {formik.errors.neededDetails}</div>}

                                <label>Priority:</label>
                                {["Low", "Medium", "High"].map(
                                  (level, index) => (
                                    <span key={index} className="ml-2">
                                      <input
                                        className="text-center mr-1"
                                        type="radio"
                                        name="neededPriority"
                                        value={level}
                                        checked={
                                          formik.values.neededPriority === level
                                        }
                                        onChange={formik.handleChange}
                                        onBlur={formik.handleBlur}
                                      />
                                      <label>{level}</label>
                                    </span>
                                  )
                                )}
                              </div>
                              {formik.touched.neededPriority &&formik.errors.neededPriority && 
                                <div className="text-red-500 text-xs">{formik.errors.neededPriority}</div>}
                              <input
                                type="file"
                                name="neededImage"
                                onChange={(event) => { formik.setFieldValue("neededImage", event.currentTarget.files[0])}}
                                onBlur={formik.handleBlur}
                                className="border border-gray-600 px-4 py-2 rounded-md"
                              />
                              {formik.touched.neededImage && formik.errors.neededImage &&
                                <div className="text-red-500 text-xs">{formik.errors.neededImage} </div>}
                             
                           <input className="border border-gray-600 px-4 py-2 rounded-md" type="number" name="hours" placeholder="Hours" 
                            value={formik.values.hours} onChange={formik.handleChange} onBlur={formik.handleBlur}/>
                             {formik.touched.hours && formik.errors.hours && 
                           <div className="text-red-500 text-xs"> {formik.errors.hours}</div>}

                              <div className="flex justify-between">
                                <button
                                  type="button"
                                  // disabled={!isOfferedValid()}
                                  onClick={() => setNext("offered")}
                                  className="bg-[#6d28d2] text-white px-5 py-1 text-lg rounded-md mt-4"
                                >
                                  Back
                                </button>
                                {/* <button
                                  type="submit"
                                  className="bg-[#6d28d2] text-white px-5 py-1 text-lg rounded-md mt-4"
                                >
                                  {isPending ? (
                                    <span className="flex items-center">
                                      {" "}
                                      Loading{" "}
                                      <FaSpinner className="animate-spin ml-2" />
                                    </span>
                                  ) : (
                                    "Submit"
                                  )}
                                </button> */}
                                <button
                                  type="button"
                                  disabled={!isNeededValid()}
                                  onClick={() => setNext("qstn")}
                                  className={` text-white px-5 py-1 text-lg rounded-md mt-4  ${isNeededValid()? "bg-[#6d28d2] cursor-pointer" : "bg-gray-400"}`}
                                >
                                next
                                </button>
                              </div>
                            </div>
                          )}
                          {/* {next === "qstn" && <QuestionCollector formik={formik} />} */}


                          {next === "qstn" &&
                          <div className="flex flex-col items-center justify-center h-screen bg-gray-100 p-4">
                          <div className="w-full max-w-md bg-white p-6 rounded-lg shadow-md">
                           
                              <h2 className="text-lg font-semibold mb-4">Enter a Question</h2>
                              <input
                                type="text"
                                name="currentQuestion"
                                placeholder="Type your question here"
                                value={formik.values.currentQuestion}
                                onChange={formik.handleChange}
                                className="w-full p-2 border rounded mb-4"
                              />
                              {formik.touched.currentQuestion && formik.errors.currentQuestion && (
                                <small className="text-red-600">{formik.errors.currentQuestion}</small>
                              )}
                    
                              <h3 className="text-sm font-semibold mb-2">Enter 3 Answers</h3>
                              {formik.values.answers.map((answer, index) => (
                                <input
                                  key={index}
                                  type="text"
                                  name={`answers[${index}]`}
                                  placeholder={`Answer ${index + 1}`}
                                  value={answer}
                                  onChange={formik.handleChange}
                                  className="w-full p-2 border rounded mb-2"
                                />
                              ))}
                              {formik.touched.answers && formik.errors.answers && (
                                <small className="text-red-600">{formik.errors.answers}</small>
                              )}
                    
                              <h3 className="text-sm font-semibold mb-2">Correct Answer</h3>
                              <select
                                name="correctAnswer"
                                value={formik.values.correctAnswer}
                                onChange={formik.handleChange}
                                className="w-full p-2 border rounded mb-4"
                              >
                                <option value="">Select correct answer</option>
                                {formik.values.answers.map((ans, index) => (
                                  <option key={index} value={ans}>
                                    {ans}
                                  </option>
                                ))}
                              </select>
                              {formik.touched.correctAnswer && formik.errors.correctAnswer && (
                                <small className="text-red-600">{formik.errors.correctAnswer}</small>
                              )}
                    
                              <h3 className="text-sm font-semibold mb-2">Difficulty Level</h3>
                              <select
                                name="difficulty"
                                value={formik.values.difficulty}
                                onChange={formik.handleChange}
                                className="w-full p-2 border rounded mb-4"
                              >
                                <option value="Easy">Easy (1 Point)</option>
                                <option value="Inter">Inter (2 Points)</option>
                                <option value="Expert">Expert (3 Points)</option>
                              </select>
                    
                              <button type="submit" className="w-full p-2 bg-blue-500 text-white rounded mt-4 hover:bg-blue-600">
                                Add Question
                              </button>
                    
                              {formik.values.questions.length > 0 && (
                                <button type="button" onClick={handleSave} className="w-full p-2 bg-green-500 text-white rounded mt-4 hover:bg-green-600">
                                  Finish & Save Questions
                                </button>
                              )}
                            </form>}
                    
                            {/* {formik.values.questions.length > 0 && (
                              <div className="mt-6">
                                <h2 className="text-xl font-semibold mb-4">Collected Questions</h2>
                                <ul className="list-disc pl-5">
                                  {formik.values.questions.map((q, index) => (
                                    <li key={index} className="mb-2">
                                      <strong>Q{index + 1} ({q.difficulty.toUpperCase()} - {q.points} pts):</strong> {q.question}
                                      <ul className="list-disc pl-5">
                                        {q.answers.map((ans, i) => (
                                          <li key={i} className={ans === q.correct_answer ? "font-bold text-green-600" : ""}>
                                            {ans}
                                          </li>
                                        ))}
                                      </ul>
                                    </li>
                                  ))}
                                </ul>
                              </div>
                            )} */}
                          </div>
                        </div> 
                        {/* </form> */}
                      </div>
                    );
                  };
                  
                  export default AddSwap;
                  


                  * // <div className='border border-gray-600 h-screen  '>
                  //     <div className='border-b  border-gray-600  h-[92px] py-4 text-center'>
                  //         <h1 className='text-20px font-semibold' > Create Questions & Answers for Your Offered Skill</h1>
                  //         <h3 className='text-sm'>Customize  Skill Assessment</h3>
                  //     </div>
                
                  //       <div className='flex flex-col justify-center p-10 mx-32 gap-1 text-sm text-gray-600 '>
                  //       <ul className='text-xs text-gray-500 list-disc'>
                  //           <h6 className='font-semibold text-md mb-4'>Instructions for Creating Questions & Answers:</h6>
                  //           <li>Ensure that the quiz contains exactly 10 questions.</li>
                  //           <li>Each question must have three answer options, with one marked as the correct answer.</li>
                  //           <li>Ensure a mix of difficulty levels, from easy to expert, to challenge learners progressively</li>
                  //           <li>Assign points to each question based on difficulty ( eg:  Easy: 1 point,Inter: 2 points ,Expert: 3 points)</li>
                  //       </ul>
                  //     </div>


